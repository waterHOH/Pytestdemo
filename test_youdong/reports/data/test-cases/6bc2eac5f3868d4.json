{"uid":"6bc2eac5f3868d4","name":"test_binglinchengxia_03[caseinfo1]","fullName":"test_youdong.test_login.TestLogin1#test_binglinchengxia_03","historyId":"5b41e789193f473e881d45c0ff76669b","time":{"start":1662621863804,"stop":1662621863890,"duration":86},"status":"broken","statusMessage":"requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","statusTrace":"self = <Response [200]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n..\\venv\\lib\\site-packages\\requests\\models.py:971: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ns = '<hr/>\\r\\n<head>\\r\\n    <title></title>\\r\\n</head>\\r\\n<form action=\"\" method=\"POST\">\\r\\n    <table style=\"height:860px...   </td>\\r\\n            <td>\\r\\n            </td>\\r\\n        </tr>\\r\\n    </table>\\r\\n</form>\\r\\n<hr/>\\r\\n\\r\\n\\r\\n\\r\\n'\ncls = None, object_hook = None, parse_float = None, parse_int = None\nparse_constant = None, object_pairs_hook = None, kw = {}\n\n    def loads(s, *, cls=None, object_hook=None, parse_float=None,\n            parse_int=None, parse_constant=None, object_pairs_hook=None, **kw):\n        \"\"\"Deserialize ``s`` (a ``str``, ``bytes`` or ``bytearray`` instance\n        containing a JSON document) to a Python object.\n    \n        ``object_hook`` is an optional function that will be called with the\n        result of any object literal decode (a ``dict``). The return value of\n        ``object_hook`` will be used instead of the ``dict``. This feature\n        can be used to implement custom decoders (e.g. JSON-RPC class hinting).\n    \n        ``object_pairs_hook`` is an optional function that will be called with the\n        result of any object literal decoded with an ordered list of pairs.  The\n        return value of ``object_pairs_hook`` will be used instead of the ``dict``.\n        This feature can be used to implement custom decoders.  If ``object_hook``\n        is also defined, the ``object_pairs_hook`` takes priority.\n    \n        ``parse_float``, if specified, will be called with the string\n        of every JSON float to be decoded. By default this is equivalent to\n        float(num_str). This can be used to use another datatype or parser\n        for JSON floats (e.g. decimal.Decimal).\n    \n        ``parse_int``, if specified, will be called with the string\n        of every JSON int to be decoded. By default this is equivalent to\n        int(num_str). This can be used to use another datatype or parser\n        for JSON integers (e.g. float).\n    \n        ``parse_constant``, if specified, will be called with one of the\n        following strings: -Infinity, Infinity, NaN.\n        This can be used to raise an exception if invalid JSON numbers\n        are encountered.\n    \n        To use a custom ``JSONDecoder`` subclass, specify it with the ``cls``\n        kwarg; otherwise ``JSONDecoder`` is used.\n    \n        The ``encoding`` argument is ignored and deprecated since Python 3.1.\n        \"\"\"\n        if isinstance(s, str):\n            if s.startswith('\\ufeff'):\n                raise JSONDecodeError(\"Unexpected UTF-8 BOM (decode using utf-8-sig)\",\n                                      s, 0)\n        else:\n            if not isinstance(s, (bytes, bytearray)):\n                raise TypeError(f'the JSON object must be str, bytes or bytearray, '\n                                f'not {s.__class__.__name__}')\n            s = s.decode(detect_encoding(s), 'surrogatepass')\n    \n        if \"encoding\" in kw:\n            import warnings\n            warnings.warn(\n                \"'encoding' is ignored and deprecated. It will be removed in Python 3.9\",\n                DeprecationWarning,\n                stacklevel=2\n            )\n            del kw['encoding']\n    \n        if (cls is None and object_hook is None and\n                parse_int is None and parse_float is None and\n                parse_constant is None and object_pairs_hook is None and not kw):\n>           return _default_decoder.decode(s)\n\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python38\\lib\\json\\__init__.py:357: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <json.decoder.JSONDecoder object at 0x0000000003031520>\ns = '<hr/>\\r\\n<head>\\r\\n    <title></title>\\r\\n</head>\\r\\n<form action=\"\" method=\"POST\">\\r\\n    <table style=\"height:860px...   </td>\\r\\n            <td>\\r\\n            </td>\\r\\n        </tr>\\r\\n    </table>\\r\\n</form>\\r\\n<hr/>\\r\\n\\r\\n\\r\\n\\r\\n'\n_w = <built-in method match of re.Pattern object at 0x0000000002FCB930>\n\n    def decode(self, s, _w=WHITESPACE.match):\n        \"\"\"Return the Python representation of ``s`` (a ``str`` instance\n        containing a JSON document).\n    \n        \"\"\"\n>       obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python38\\lib\\json\\decoder.py:337: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <json.decoder.JSONDecoder object at 0x0000000003031520>\ns = '<hr/>\\r\\n<head>\\r\\n    <title></title>\\r\\n</head>\\r\\n<form action=\"\" method=\"POST\">\\r\\n    <table style=\"height:860px...   </td>\\r\\n            <td>\\r\\n            </td>\\r\\n        </tr>\\r\\n    </table>\\r\\n</form>\\r\\n<hr/>\\r\\n\\r\\n\\r\\n\\r\\n'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python38\\lib\\json\\decoder.py:355: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_youdong.test_login.TestLogin1 object at 0x00000000041119D0>\ncaseinfo = {'name': '获得统一的鉴权码token-2', 'request': {'data': {'hd1051': {'showCity': {'city': 7, 'kind': 1}}}, 'headers': {'content...od': 'post', 'url': 'http://lyjxydcsf2.hnyoulu.com/cmd_t.php?tpass=abcddd123&sevid=1&uid=1000002'}, 'validate': 'None'}\n\n    @pytest.mark.parametrize(\"caseinfo\", YamlUtil().read_testcase_yaml(\"get_token.yml\"))\n    def test_binglinchengxia_03(self, caseinfo):\n        print(\"测试名称\", caseinfo[\"name\"])\n        print(\"测试名称\", caseinfo[\"request\"][\"method\"])\n        print(\"测试地址\", caseinfo[\"request\"][\"url\"])\n        print(\"请求信息\", caseinfo[\"request\"][\"data\"])\n        print(\"测试头部\", caseinfo[\"request\"][\"headers\"])\n        print(\"测试断言\", caseinfo[\"validate\"])\n        url = caseinfo[\"request\"][\"url\"]\n        body = caseinfo[\"request\"][\"data\"]\n        headers = caseinfo[\"request\"][\"headers\"]\n        method = caseinfo[\"request\"][\"method\"]\n        # 发起post请求，获取返回的数据\n>       RequestsUtil().send_request(method, url, body)\n\ntest_login.py:74: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\conmon\\requests_util.py:12: in send_request\n    if rep.status_code == 200 and rep.json()[\"s\"] == 1:\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Response [200]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n..\\venv\\lib\\site-packages\\requests\\models.py:975: JSONDecodeError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"clear_yaml","time":{"start":1662621862345,"stop":1662621862346,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":false},{"name":"_xunit_setup_class_fixture_TestLogin1","time":{"start":1662621862346,"stop":1662621862346,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":false},{"name":"_xunit_setup_method_fixture_TestLogin1","time":{"start":1662621863804,"stop":1662621863804,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":false}],"afterStages":[{"name":"_xunit_setup_method_fixture_TestLogin1::0","time":{"start":1662621863943,"stop":1662621863943,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":false},{"name":"_xunit_setup_class_fixture_TestLogin1::0","time":{"start":1662621865026,"stop":1662621865026,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":false}],"labels":[{"name":"parentSuite","value":"test_youdong"},{"name":"suite","value":"test_login"},{"name":"subSuite","value":"TestLogin1"},{"name":"host","value":"YD-BG-0319"},{"name":"thread","value":"11712-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_youdong.test_login"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"caseinfo","value":"{'name': '获得统一的鉴权码token-2', 'request': {'method': 'post', 'url': 'http://lyjxydcsf2.hnyoulu.com/cmd_t.php?tpass=abcddd123&sevid=1&uid=1000002', 'data': {'hd1051': {'showCity': {'city': 7, 'kind': 1}}}, 'headers': {'content-type': 'application/json'}}, 'validate': 'None'}"}],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":[]},"source":"6bc2eac5f3868d4.json","parameterValues":["{'name': '获得统一的鉴权码token-2', 'request': {'method': 'post', 'url': 'http://lyjxydcsf2.hnyoulu.com/cmd_t.php?tpass=abcddd123&sevid=1&uid=1000002', 'data': {'hd1051': {'showCity': {'city': 7, 'kind': 1}}}, 'headers': {'content-type': 'application/json'}}, 'validate': 'None'}"]}